/*

Cracker JS

Author: zarcotech
License: MIT

Credits:

aluraOS: Alura Network
PhantomOS: Phantom Network (Now Alura Network)

*/

"use strict";

import * as fs from 'fs'; 
import * as path from 'path'; 


class Cracker {



    constructor(options = {}) {
        const config = { ...this.defaultOptions, ...options };
        Object.assign(this, config);

        this.name = "Cracker";
        this.version = "1.0.0";
        this.author = "zarcotech";
        this.description = "Your webOS, in one line.";
        this.license = "MIT";
        this.repo = "https://github.com/Zarcotech/cracker";
        this.website = "https://zarcotech.dev";

        this.defaultOptions = {
            bgColor: "#1e1e1e",
            color: "#ffffff",
            fontFamily: "Arial, sans-serif",
        };
    }

    createOS(options = {}) {
        console.log(
            `Loaded crackerJS v${this.version} by ${this.author}`,
        );

        this.runOS({
            bg: this.bg,
            color: this.color,
            fontFamily: this.fontFamily,
            ...options
        });
    }

    createBrowser(options) {
    
        const base = `<!-- From aluraOS (Alura Network) --><!DOCTYPE html><html lang="en"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width,initial-scale=1" /><title>Browser</title><style>body { margin: 0; font-family: ${options.fontFamily || "system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial;"}; color: ${options.color || "#fff"}; display: flex; flex-direction: column; height: 100vh; background: ${options.bg || "linear-gradient(135deg, #0b1116 0%, #1a2332 50%, #071018 100%)"}; overflow: hidden;}.titlebar { display: flex; align-items: center; padding: 8px 16px; background: rgba(255,255,255,0.04); backdrop-filter: blur(20px); border-bottom: 1px solid rgba(255,255,255,0.08); min-height: 40px;}.window-controls { display: flex; gap: 8px; margin-left: auto;}.control-btn { width: 12px; height: 12px; border-radius: 50%; border: none; cursor: pointer;}.control-btn.close { background: #ff5f57; }.control-btn.minimize { background: #ffbd2e; }.control-btn.maximize { background: #28ca42; }/* .tabs { display: flex; gap: 6px; flex: 1;}.tab { display: flex; align-items: center; gap: 6px; padding: 4px 10px; border-radius: 6px; font-size: 14px; white-space: nowrap; cursor: pointer; transition: background 0.2s;}.tab.active { background: rgba(255,255,255,0.08); font-weight: 500;}.tab.inactive { background: transparent; color: rgba(255,255,255,0.6);}.close-tab { font-size: 12px; cursor: pointer; opacity: 0.6;}.close-tab:hover { opacity: 1; }.new-tab { padding: 4px 10px; border-radius: 6px; background: rgba(255,255,255,0.08); cursor: pointer;} */.addressbar { display: flex; align-items: center; gap: 12px; padding: 12px 16px; border-bottom: 1px solid rgba(255,255,255,0.06); background: rgba(255,255,255,0.02); backdrop-filter: blur(10px);}.nav-controls { display: flex; gap: 6px;}.addr-input { flex: 1; padding: 10px 16px; border-radius: 12px; background: rgba(255,255,255,0.08); backdrop-filter: blur(20px); border: 1px solid rgba(255,255,255,0.1); color: #fff; outline: none; font-size: 14px; transition: all 0.2s ease;}.addr-input:focus { background: rgba(255,255,255,0.12); border-color: rgba(255,255,255,0.2); box-shadow: 0 0 20px rgba(255,255,255,0.1);}.icon-btn { width: 36px; height: 36px; display: flex; align-items: center; justify-content: center; border-radius: 8px; background: rgba(255,255,255,0.06); backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.08); color: #fff; font-size: 16px; cursor: pointer; transition: all 0.2s ease;}.icon-btn:hover { background: rgba(255,255,255,0.12); transform: translateY(-1px); box-shadow: 0 4px 12px rgba(0,0,0,0.2);}.main { flex: 1; display: flex; min-height: 0; overflow: hidden;}.sidebar { width: 72px; border-right: 1px solid rgba(255,255,255,0.08); padding: 16px 12px; background: rgba(255,255,255,0.03); backdrop-filter: blur(20px); display: flex; flex-direction: column; align-items: center; gap: 20px;}.sidebar button { width: 48px; height: 48px; display: flex; align-items: center; justify-content: center; border-radius: 12px; background: rgba(255,255,255,0.06); backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.08); color: #fff; cursor: pointer; font-size: 20px; transition: all 0.3s ease; position: relative;}.sidebar button:hover { background: rgba(255,255,255,0.12); transform: scale(1.05); box-shadow: 0 6px 20px rgba(0,0,0,0.3);}.sidebar button.active { background: linear-gradient(135deg, rgba(255,255,255,0.15), rgba(255,255,255,0.08)); box-shadow: 0 8px 25px rgba(0,0,0,0.4);}.content { flex: 1; padding: 24px; overflow: auto; background: rgba(0,0,0,0.1); backdrop-filter: blur(5px);}#frame { width: 100%; height: 100%; flex: 1; border: none;}.home-wrapper { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; gap: 48px; padding: 20px;}.home-search-container { position: relative; width: min(500px, 90vw); display: flex; justify-content: center; align-items: center; transition: all 0.3s ease;}.home-search-container:hover { transform: translateY(-4px); filter: drop-shadow(0 12px 30px rgba(0,0,0,0.4));}.home-search { width: 100%; padding: 20px 60px; border-radius: 30px; border: none; outline: none; background: linear-gradient(135deg, rgba(255,255,255,0.95), rgba(255,255,255,0.85)); backdrop-filter: blur(20px); color: #333; font-size: 16px; box-sizing: border-box; box-shadow: 0 8px 32px rgba(0,0,0,0.2); transition: all 0.3s ease;}.home-search:focus { background: rgba(255,255,255,0.98); box-shadow: 0 12px 40px rgba(0,0,0,0.3);}.home-search::placeholder { color: #666; font-size: 15px;}.home-left-icon, .home-right-icon { position: absolute; top: 50%; transform: translateY(-50%); width: 24px; height: 24px; pointer-events: none; opacity: 0.7;}.home-left-icon { left: 20px; }.home-right-icon { right: 20px; }.cards-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 24px; width: 100%; max-width: 800px; padding: 0 20px;}.card { background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05)); backdrop-filter: blur(20px); border: 1px solid rgba(255,255,255,0.1); height: 140px; border-radius: 20px; display: flex; flex-direction: column; justify-content: center; align-items: center; font-weight: 500; color: #fff; cursor: pointer; perspective: 1000px; transition: all 0.3s ease; position: relative; overflow: hidden;}.card::before { content: ''; position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(135deg, transparent, rgba(255,255,255,0.05)); opacity: 0; transition: opacity 0.3s ease;}.card:hover::before { opacity: 1;}.card h3 { margin: 0 0 8px 0; font-size: 18px; z-index: 1;}.card p { font-size: 13px; opacity: 0.8; text-align: center; margin: 0; z-index: 1;}@media (max-width: 768px) { .sidebar { width: 60px; padding: 12px 8px; } .sidebar button { width: 44px; height: 44px; } .content { padding: 16px; } .home-wrapper { gap: 32px; } .cards-grid { grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 16px; } .addressbar { padding: 10px 12px; gap: 8px; } .icon-btn { width: 32px; height: 32px; }}@media (max-width: 480px) { .nav-controls { display: none; } .home-search { padding: 16px 50px; font-size: 14px; } .cards-grid { grid-template-columns: 1fr; max-width: 300px; }}</style><script src="/baremux/index.js"></script><script src="scram/scramjet.all.js"></script><script src="proxy.js"></script></head><body><div class="addressbar"><div class="nav-controls"><button class="icon-btn" id="reloadBtn">‚ü≥</button></div><form id="search-form"><input class="addr-input" id="addressBar" placeholder="Search or enter address..." /></form></div><iframe id="frame" src="" frameborder="2"></iframe><script>const addressBar = document.getElementById("addressBar");const content = document.getElementById("mainContent");const sidebarBtns = document.querySelectorAll('.sidebar button');function setActiveButton(activeBtn) { sidebarBtns.forEach(btn => btn.classList.remove('active')); activeBtn.classList.add('active');}function showContent(contentHTML) { content.innerHTML = contentHTML; applyTiltToHomeCards();}function addCardTilt(card){ card.addEventListener('mousemove', e=>{ const rect = card.getBoundingClientRect(); const x = e.clientX - rect.left; const y = e.clientY - rect.top; const rotateX = ((rect.height/2 - y)/(rect.height/2))*15; const rotateY = ((x - rect.width/2)/(rect.width/2))*15; card.style.boxShadow = '0 25px 50px rgba(0,0,0,0.4)'; }); card.addEventListener('mouseleave',()=>{ card.style.transform = 'rotateX(0deg) rotateY(0deg) scale(1) translateZ(0px)'; card.style.boxShadow = '0 8px 25px rgba(0,0,0,0.2)'; });}function applyTiltToHomeCards(){ const cards = document.querySelectorAll('.home-wrapper .card'); cards.forEach(addCardTilt);}document.getElementById("reloadBtn").onclick = ()=>console.log("Page reloaded");</script><script src="script.js"></script></body></html>`

        const filePath = path.join(process.cwd(), options.outputFile)

        fs.writeFile(filePath, base, (err) => {
          if (err) {
            console.error(err);
            return;
          }
          console.log('File has been saved!');
        });

        
        
    }


    createOS(options) {

        const base = `<!-- From aluraOS (Alura Network) --><!doctype html><html lang="en"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link href="https://fonts.googleapis.com/css2?family=Exo:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet"><title>aluraOS</title><style>body { margin: 0; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial; background: url("wallpapers/wallpaper.jpg") center/cover no-repeat; height: 100vh; overflow: hidden; color: white; user-select: none;}.desktop { position: relative; width: 100%; height: 100%; }canvas#dragGridOverlay { position: absolute; top:0; left:0; pointer-events: none; z-index: 5; opacity: 0; }.icon { position: absolute; width: 80px; height: 100px; text-align: center; padding: 8px 0; cursor: default; border-radius: 8px; box-sizing: border-box; transition: box-shadow 0.15s ease, background-color 0.15s ease, transform 0.2s ease;}.icon:hover { transform: scale(0.9);}.icon.selected { background: rgba(255,255,255,0.08); box-shadow: 0 0 0 1px rgba(255,255,255,0.6) inset;}.icon img { width: 48px; height: 48px; display: block; margin: 0 auto; pointer-events: none; }.icon .label { margin-top: 4px; font-size: 12px; white-space: nowrap; }.taskbar { position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); width: 80%; max-width: 800px; height: 50px; background: rgba(0,0,0,0.4); backdrop-filter: blur(12px); border-radius: 25px; display: flex; align-items: center; justify-content: center; padding: 0 20px;}.start-btn { background: none; border: none; color: white; font-size: 16px; cursor: pointer; position: absolute; left: 12px; z-index: 4; }.taskbar-icons { display: flex; align-items: center; gap: 12px; margin-right: 8px; }.clock { position: absolute; right: 12px; z-index: 4; }.taskbar-icons img { width: 24px; height: 24px; cursor: pointer; }.clock { font-size: 14px; }.spotlight { position: absolute; top: 20%; left: 50%; transform: translateX(-50%); width: 400px; background: rgba(0,0,0,0.7); backdrop-filter: blur(20px); border-radius: 12px; padding: 16px; display: none;}.spotlight input { width: 100%; padding: 8px; border: none; border-radius: 6px; font-size: 16px; outline: none;}.spotlight.open { display: block; }#mondWidget { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); display: flex; flex-direction: column; align-items: center; justify-content: center; font-family: 'Exo', sans-serif; color: white; pointer-events: none; text-align: center;}#mondWidget .day { font-size: 64px; font-weight: 700; letter-spacing: 2px; margin-bottom: 8px; }#mondWidget .time { font-size: 28px; font-weight: 500; letter-spacing: 1px; }.app-window { border-radius: 8px; overflow: hidden; display: flex; flex-direction: column; position: absolute; top: 100px; left: 100px; width: 500px; height: 400px; z-index: 10;}#window { position: absolute; /* transition: top 0.3s ease, left 0.3s ease, width 0.3s ease, height 0.3s ease; */ /* transitioning to make minimize effect */ transition: all 0.5s ease-in-out;}.app-titlebar { height: 36px; /* background: rgba(255,255,255,0.3); */ background: #3d2f52; backdrop-filter: blur(20px); display: flex; align-items: center; padding: 0 12px; flex-shrink: 0; /* border-bottom: 1px solid rgba(255,255,255,0.6); */ border-top-left-radius: 8px; border-top-right-radius: 8px; position: relative; cursor: move;}.app-content { flex: 1; background: rgba(30,30,30,0.8); backdrop-filter: blur(10px); display: flex; flex-direction: column;}.app-window.fullscreen { border-radius: 0; /* remove bevel */ top: 0; left: 0; width: 100%; height: calc(100% - 69px);}.app-window.fullscreen .app-titlebar { background: #151125; border-radius: 0;}.app-window.fullscreen .app-content { border-radius: 0;}.app-content { flex: 1; background: rgba(50,50,50,0.6); backdrop-filter: blur(15px); border-bottom-left-radius: 8px; border-bottom-right-radius: 8px; display: flex; flex-direction: column; overflow: hidden;}/* Title */.app-titlebar .mac-buttons { display: flex; gap: 8px; z-index: 2; /* above title text */}.app-titlebar .title { position: absolute; left: 50%; transform: translateX(-50%); pointer-events: none; color: white; font-weight: 500; font-size: 14px; white-space: nowrap; z-index: 1;}.app-titlebar .mac-buttons button { width: 12px; height: 12px; border-radius: 50%; cursor: pointer; flex-shrink: 0; transition: transform 0.08s ease, box-shadow 0.08s ease; border: none; padding: 0; background: transparent; display: inline-flex; align-items: center; justify-content: center;}.app-titlebar .mac-buttons button:hover { transform: scale(1.2); }.app-titlebar .mac-buttons button:active { transform: scale(0.95); }.app-titlebar .mac-buttons button:focus { outline: 2px solid rgba(255,255,255,0.06); outline-offset: 2px; }.app-titlebar .mac-buttons .close { background: #ff5f56; }.app-titlebar .mac-buttons .minimize { background: #ffbd2e; }.app-titlebar .mac-buttons .maximize { background: #27c93f; }.app-content { flex: 1; }.app-content iframe { width: 100%; height: 100%; border: none;}.app-window.focused { box-shadow: 0 8px 24px rgba(0,0,0,0.5); transition: box-shadow 0.15s ease;}.app-window.minimized { opacity: 0; pointer-events: none; transform: scale(0.98); filter: blur(1px); position: absolute; /* the --target-x and --target-y will be handled in js */ transform: translate(calc(var(--target-x) - 50%), calc(var(--target-y) - 50%)) scale(0.1);}.app-window .resize-handle { position: absolute; background: transparent; }.app-window .resize-handle.n,.app-window .resize-handle.s { left: 0; right: 0; height: 6px; cursor: ns-resize;}.app-window .resize-handle.n { top: 0; }.app-window .resize-handle.s { bottom: 0; }.app-window .resize-handle.e,.app-window .resize-handle.w { top: 0; bottom: 0; width: 6px; cursor: ew-resize;}.app-window .resize-handle.e { right: 0; }.app-window .resize-handle.w { left: 0; }.app-window .resize-handle.nw,.app-window .resize-handle.ne,.app-window .resize-handle.sw,.app-window .resize-handle.se { width: 12px; height: 12px;}.app-window .resize-handle.nw { top: 0; left: 0; cursor: nwse-resize; }.app-window .resize-handle.ne { top: 0; right: 0; cursor: nesw-resize; }.app-window .resize-handle.sw { bottom: 0; left: 0; cursor: nesw-resize; }.app-window .resize-handle.se { bottom: 0; right: 0; cursor: nwse-resize; }.taskbar-windows { display:flex; gap:8px; align-items:center; }.taskbar-window-btn { display:flex; align-items:center; gap:8px; padding:4px 8px; border-radius:8px; border: none; background: rgba(255,255,255,0.04); color: white; cursor: pointer; font-size: 13px; transition: background 160ms ease, transform 220ms ease, opacity 220ms ease, box-shadow 120ms ease;}.taskbar-window-btn:hover { background: rgba(255,255,255,0.07); transform: translateY(-2px); }.taskbar-window-btn .tb-icon { width:18px; height:18px; flex-shrink:0; display:block; border-radius:4px; }.taskbar-window-btn .tb-label { display:inline-block; max-width:100px; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; }.app-window { transition: box-shadow 160ms ease; will-change: transform, opacity; }.shadow { position: absolute; pointer-events: none; background: rgba(178,152,255,0.16); border: 1px solid rgba(178,152,255,0.28); border-radius: 10px; box-shadow: 0 8px 30px rgba(120,90,200,0.12); transition: opacity 180ms ease, transform 180ms ease; opacity: 0; z-index: 9;}.drag-catcher { position: fixed; inset: 0; z-index: 9998; background: transparent; touch-action: none; cursor: grabbing;}</style></head><body><div class="desktop" id="desktop"><!-- anything that is coming.html means its under dev. or hasnt been done yet --><canvas id="dragGridOverlay"></canvas><div class="icon" data-id="Pulsar" data-app="browser.html"><img src="icons/gchrome.png"><div class="label">Browser</div></div><!-- <div class="icon" data-id="Files" data-app="apps/finder.html"><img src="icons/files.png"><div class="label">Files</div></div><div class="icon" data-id="Music" data-app="apps/coming.html"><img src="icons/music.png"><div class="label">Music</div></div><div class="icon" data-id="Wisp" data-app="apps/coming.html"><img src="icons/wifi.png"><div class="label">Wisp</div></div> --><div class="icon" data-id="Credits" data-app="apps/credits.html"><img src="icons/github.png"><div class="label">Credits</div></div><div class="taskbar" style="background-color: #3d2f52;"><button class="start-btn" id="startBtn"><!--place it here when it functions --></button><div class="taskbar-icons"><img data-app="browser.html" class="icon" data-id="Pulsar" src="icons/gchrome.png"></div><div class="taskbar-windows" id="taskbarWindows" style="display:flex;gap:6px;align-items:center"></div><div class="clock" id="clock"></div></div><div class="spotlight" id="spotlight"><input type="text" placeholder="Search..."></div><div id="mondWidget"><div class="day" id="mondDay">MONDAY</div><div class="time" id="mondTime">12:34</div></div></div><script>(function(){ const desktop = document.getElementById('desktop'); const overlay = document.getElementById('dragGridOverlay'); const ctx = overlay.getContext('2d'); const icons = Array.from(document.querySelectorAll('.icon')); const startBtn = document.getElementById('startBtn'); const spotlight = document.getElementById('spotlight'); const clockEl = document.getElementById('clock'); const gridX = 80, gridY = 100, taskbarHeight = 40, radius = 2; let drag = null, overlayOpacity = 0, gridTimer = null, gridVisible = false; overlay.width = window.innerWidth; overlay.height = window.innerHeight; const dragOccupied = new Set(); function getGridKey(c,r){ return "c, r"; } function layoutIcons(){ dragOccupied.clear(); const maxCols = Math.floor(window.innerWidth / gridX); const maxRows = Math.floor((window.innerHeight - taskbarHeight) / gridY); let col = 0, row = 0; icons.forEach(el=>{ while(dragOccupied.has(getGridKey(col,row))){ row++; if(row >= maxRows){ row=0; col++; } } el.style.left = col*gridX + 'px'; el.style.top = row*gridY + 'px'; dragOccupied.add(getGridKey(col,row)); el.dataset.oldLeft = el.style.left; el.dataset.oldTop = el.style.top; row++; if(row >= maxRows){ row=0; col++; } }); } layoutIcons(); window.addEventListener('resize', layoutIcons); desktop.addEventListener('click', e=>{ if(e.target.closest('.icon')){ icons.forEach(el=>el.classList.remove('selected')); e.target.closest('.icon').classList.add('selected'); } else icons.forEach(el=>el.classList.remove('selected')); }); icons.forEach(el=>{ el.addEventListener('mousedown', e=>{ drag = {el, offsetX:e.offsetX, offsetY:e.offsetY}; overlayOpacity = 0; gridVisible = false; clearTimeout(gridTimer); gridTimer = setTimeout(()=>{ gridVisible = true; },150); }); el.addEventListener('dblclick', ()=>{ const appName = el.querySelector('.label').textContent; const appUrl = el.dataset.app; if(appUrl) openApp(appName, appUrl); }); }); function drawGridOverlay(dragEl){ ctx.clearRect(0,0,overlay.width,overlay.height); const iconCenterX = parseInt(dragEl.style.left)+gridX/2; const iconCenterY = parseInt(dragEl.style.top)+gridY/2; const maxCols = Math.ceil(overlay.width/gridX); const maxRows = Math.ceil((overlay.height-taskbarHeight)/gridY); for(let col=0; col<maxCols; col++){ for(let row=0; row<maxRows; row++){ const cellX = col*gridX; const cellY = row*gridY; const cellCenterX = cellX+gridX/2; const cellCenterY = cellY+gridY/2; const dx = cellCenterX - iconCenterX; const dy = cellCenterY - iconCenterY; const distance = Math.sqrt(dx*dx + dy*dy); if(distance > radius*gridX) continue; const alpha = overlayOpacity*(1-distance/(radius*gridX)); ctx.strokeStyle = ("'rgba(255,255,255,' + alpha + ')'); ctx.lineWidth = 1; ctx.strokeRect(cellX,cellY,gridX,gridY); } } overlay.style.opacity = overlayOpacity; } function animateOverlay(){ if(drag && gridVisible && overlayOpacity<1) overlayOpacity += 0.05; if((!drag || !gridVisible) && overlayOpacity>0) overlayOpacity -= 0.05; ctx.clearRect(0,0,overlay.width,overlay.height); if(drag && gridVisible && overlayOpacity>0) drawGridOverlay(drag.el); overlay.style.opacity = overlayOpacity; requestAnimationFrame(animateOverlay); } animateOverlay(); desktop.addEventListener('mousemove', e=>{ if(!drag) return; let x = e.clientX - drag.offsetX; let y = e.clientY - drag.offsetY; x = Math.min(Math.max(0,x), window.innerWidth-gridX); y = Math.min(Math.max(0,y), window.innerHeight-gridY-taskbarHeight); drag.el.style.left = x + 'px'; drag.el.style.top = y + 'px'; }); desktop.addEventListener('mouseup', ()=>{ if(!drag) return; const maxCols=Math.floor(window.innerWidth/gridX); const maxRows=Math.floor((window.innerHeight-taskbarHeight)/gridY); let iconCenterX=parseInt(drag.el.style.left)+gridX/2; let iconCenterY=parseInt(drag.el.style.top)+gridY/2; let col=Math.floor(iconCenterX/gridX); let row=Math.floor(iconCenterY/gridY); const oldCol=Math.round(parseInt(drag.el.dataset.oldLeft)/gridX); const oldRow=Math.round(parseInt(drag.el.dataset.oldTop)/gridY); dragOccupied.delete(getGridKey(oldCol,oldRow)); let found=false, startCol=col, startRow=row; while(!found){ const key=getGridKey(col,row); if(!dragOccupied.has(key)){ drag.el.style.left=(col*gridX)+'px'; drag.el.style.top=(row*gridY)+'px'; found=true; break; } row++; if(row>=maxRows){ row=0; col++; } if(col>=maxCols){ col=0; row=0; } if(col===startCol && row===startRow) break; } dragOccupied.clear(); icons.forEach(icon=>{ const c=Math.round(parseInt(icon.style.left)/gridX); const r=Math.round(parseInt(icon.style.top)/gridY); dragOccupied.add(getGridKey(c,r)); icon.dataset.oldLeft=icon.style.left; icon.dataset.oldTop=icon.style.top; }); drag=null; clearTimeout(gridTimer); gridVisible=false; });// make spotlight better guys // Clock function updateClock(){ const d=new Date(); clockEl.textContent=d.toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'}); } updateClock(); setInterval(updateClock,60000); function openApp(name, url) { const win = document.createElement('div'); win.className = 'app-window'; win.style.left = (50 + (window.windows?window.windows.length*20:0)) + 'px'; win.style.top = (80 + (window.windows?window.windows.length*20:0)) + 'px'; if (name === 'Credits') { win.style.width = '500px'; win.style.height = '600px'; } else { win.style.width = '900px'; win.style.height = '640px'; } win.innerHTML = "<div class="app-titlebar" role="toolbar"><div class="mac-buttons"><button class="close" title="Close" aria-label="Close"></button><button class="minimize" title="Minimize" aria-label="Minimize"></button><button class="maximize" title="Maximize" aria-label="Maximize"></button></div><div class="title">" + name + "</div></div><div class="app-content"><iframe sandbox="allow-same-origin allow-scripts allow-forms"></iframe></div><div class="resize-handle n"></div><div class="resize-handle s"></div><div class="resize-handle e"></div><div class="resize-handle w"></div><div class="resize-handle ne"></div><div class="resize-handle nw"></div><div class="resize-handle se"></div><div class="resize-handle sw"></div>"; desktop.appendChild(win); const shadow = document.createElement('div'); shadow.className = 'shadow'; desktop.appendChild(shadow); win._shadow = shadow; const titlebar = win.querySelector('.app-titlebar'); const closeBtn = win.querySelector('.mac-buttons .close'); const minBtn = win.querySelector('.mac-buttons .minimize'); const maxBtn = win.querySelector('.mac-buttons .maximize'); const content = win.querySelector('.app-content'); const iframe = content.querySelector('iframe'); const taskbarWindows = document.getElementById('taskbarWindows'); if (!window.windows) window.windows = []; if (!window.zIndexCounter) window.zIndexCounter = 10; function focusWindow(w) { window.zIndexCounter++; w.style.zIndex = window.zIndexCounter; w.classList.add('focused'); window.windows.forEach(oth => { if (oth !== w) oth.classList.remove('focused'); }); updateTaskbarButtons(); } function minimizeWindow(w) { const tbBtn = w._tbBtn; if (!tbBtn) { w.dataset.minimized = 'true'; w.classList.add('minimized'); updateTaskbarButtons(); return; } const winRect = w.getBoundingClientRect(); const btnRect = tbBtn.getBoundingClientRect(); const winCx = winRect.left + winRect.width / 2; const winCy = winRect.top + winRect.height / 2; const btnCx = btnRect.left + btnRect.width / 2; const btnCy = btnRect.top + btnRect.height / 2; const dx = btnCx - winCx; const dy = btnCy - winCy; const scale = Math.max(0.05, Math.min(1, btnRect.width / winRect.width)); w.style.willChange = 'transform, opacity'; w.style.transformOrigin = 'center center'; w.style.transition = 'transform 420ms cubic-bezier(.2,.8,.2,1), opacity 320ms linear'; requestAnimationFrame(()=>{ w.style.transform = ("translate(" + dx + "px, " + dy + "px) scale(" + scale ")"); w.style.opacity = '0'; }); function onTrans(e){ if(e.propertyName !== 'transform') return; w.removeEventListener('transitionend', onTrans); w.classList.add('minimized'); w.style.transition = ''; w.style.transform = ''; w.style.opacity = ''; w.style.willChange = ''; w.dataset.minimized = 'true'; updateTaskbarButtons(); } w.addEventListener('transitionend', onTrans); } function restoreWindow(w) { const tbBtn = w._tbBtn; delete w.dataset.minimized; w.classList.remove('minimized'); if (!tbBtn) { focusWindow(w); updateTaskbarButtons(); return; } const winRect = w.getBoundingClientRect(); const btnRect = tbBtn.getBoundingClientRect(); const winCx = winRect.left + winRect.width / 2; const winCy = winRect.top + winRect.height / 2; const btnCx = btnRect.left + btnRect.width / 2; const btnCy = btnRect.top + btnRect.height / 2; const dx = btnCx - winCx; const dy = btnCy - winCy; const scale = Math.max(0.05, Math.min(1, btnRect.width / winRect.width)); w.style.willChange = 'transform, opacity'; w.style.transformOrigin = 'center center'; w.style.transform = ('translate(' + dx 'px, '+ dy + '}px) scale('+ scale ')'); w.style.opacity = '0'; requestAnimationFrame(()=>{ w.style.transition = 'transform 420ms cubic-bezier(.2,.8,.2,1), opacity 300ms linear'; w.style.transform = ''; w.style.opacity = '1'; }); function onTrans(e){ if(e.propertyName !== 'transform') return; w.removeEventListener('transitionend', onTrans); w.style.transition = ''; w.style.transform = ''; w.style.opacity = ''; w.style.willChange = ''; focusWindow(w); updateTaskbarButtons(); } w.addEventListener('transitionend', onTrans); } const tbBtn = document.createElement('button'); tbBtn.className = 'taskbar-window-btn'; const tbIcon = document.createElement('img'); tbIcon.className = 'tb-icon'; const srcIcon = Array.from(document.querySelectorAll('.icon')).find(i=> (i.querySelector('.label')||{}).textContent === name); tbIcon.src = (srcIcon && srcIcon.querySelector('img')) ? srcIcon.querySelector('img').src : 'icons/gchrome.png'; const tbLabel = document.createElement('span'); tbLabel.className = 'tb-label'; tbLabel.textContent = name.replace(/\s+/g,' '); tbBtn.appendChild(tbIcon); tbBtn.appendChild(tbLabel); tbBtn.title = name; tbBtn.addEventListener('click', e => { e.stopPropagation(); if (win.dataset.minimized) restoreWindow(win); else if (win.classList.contains('focused')) minimizeWindow(win); else focusWindow(win); }); taskbarWindows.appendChild(tbBtn); win._tbBtn = tbBtn; window.windows.push(win); win.addEventListener('mousedown', e => { e.stopPropagation(); focusWindow(win); }); desktop.addEventListener('mousedown', e => { if (!e.target.closest('.app-window')) { window.windows.forEach(w => w.classList.remove('focused')); updateTaskbarButtons(); } }); titlebar.addEventListener('dblclick', e => { e.stopPropagation(); toggleMaximize(); }); let isDragging = false; let dragOffsetX=0, dragOffsetY=0; titlebar.addEventListener('pointerdown', e => { if (e.button !== 0) return; const now = Date.now(); if (!win._lastPointerDown) win._lastPointerDown = 0; if (now - win._lastPointerDown < 350) { win._lastPointerDown = 0; e.stopPropagation(); toggleMaximize(); return; } win._lastPointerDown = now; // don't start a drag when clicking the mac-buttons (close/min/max) if (e.target.closest('.mac-buttons')) return; // if this window was snapped (left/right), restore its previous geometry so user can drag out if (win.dataset.snapped) { if (win.dataset.prevLeft) { win.style.left = win.dataset.prevLeft; win.style.top = win.dataset.prevTop; win.style.width = win.dataset.prevWidth; win.style.height = win.dataset.prevHeight; } delete win.dataset.snapped; delete win.dataset.prevLeft; delete win.dataset.prevTop; delete win.dataset.prevWidth; delete win.dataset.prevHeight; } // if window is fullscreen, restore it so the user can drag it out (snap-out) if (win.classList.contains('fullscreen')) { toggleMaximize(); } isDragging = true; focusWindow(win); const rect = win.getBoundingClientRect(); dragOffsetX = e.clientX - rect.left; dragOffsetY = e.clientY - rect.top; win._shadow.style.opacity = '0'; win._dragPointerId = e.pointerId; try { titlebar.setPointerCapture && titlebar.setPointerCapture(e.pointerId); } catch {} try { win.setPointerCapture && win.setPointerCapture(e.pointerId); } catch {} const catcher = document.createElement('div'); catcher.className = 'drag-catcher'; desktop.appendChild(catcher); win._dragCatcher = catcher; document.addEventListener('pointermove', onDocPointerMove); document.addEventListener('pointerup', onDocPointerUp); document.addEventListener('pointercancel', onDocPointerUp); }); function onDocPointerMove(e){ if (!isDragging) return; let nx = e.clientX - dragOffsetX; let ny = e.clientY - dragOffsetY; nx = Math.max(0, Math.min(nx, window.innerWidth - 100)); ny = Math.max(0, Math.min(ny, window.innerHeight - 80)); win.style.left = nx + 'px'; win.style.top = ny + 'px'; if (nx < 40) { win.style.boxShadow = '0 6px 20px rgba(0,0,0,0.6), inset 0 0 0 2px rgba(255,255,255,0.02)'; } else if (nx > window.innerWidth - 40 - (parseFloat(win.style.width) || 0)) { win.style.boxShadow = '0 6px 20px rgba(0,0,0,0.6), inset 0 0 0 2px rgba(255,255,255,0.02)'; } else { win.style.boxShadow = ''; } const sh = win._shadow; if (!sh) return; const rect = win.getBoundingClientRect(); const top = rect.top; const left = rect.left; const right = window.innerWidth - rect.right; if (top < 30) { sh.style.left = '0px'; sh.style.top = '0px'; sh.style.width = window.innerWidth + 'px'; sh.style.height = 'calc(100% - 90px)'; sh.style.opacity = '1'; } else if (left < 40) { sh.style.left = '0px'; sh.style.top = '0px'; sh.style.width = '50%'; sh.style.height = 'calc(100% - 69px)'; sh.style.opacity = '1'; } else if (right < 40) { sh.style.left = '50%'; sh.style.top = '0px'; sh.style.width = '50%'; sh.style.height = 'calc(100% - 69px)'; sh.style.opacity = '1'; } else { sh.style.opacity = '0'; } } function onDocPointerUp(e){ if (isDragging) { const rect = win.getBoundingClientRect(); const top = rect.top; const left = rect.left; const right = window.innerWidth - rect.right; if (top < 30) { if (!win.classList.contains('fullscreen')) toggleMaximize(); } else if (left < 30) { if (!win.dataset.prevLeft) { win.dataset.prevLeft = win.style.left; win.dataset.prevTop = win.style.top; win.dataset.prevWidth = win.style.width; win.dataset.prevHeight = win.style.height; } win.dataset.snapped = 'left'; win.style.left = '0px'; win.style.top = '0px'; win.style.width = '50%'; win.style.height = 'calc(100% - 69px)'; } else if (right < 30) { if (!win.dataset.prevLeft) { win.dataset.prevLeft = win.style.left; win.dataset.prevTop = win.style.top; win.dataset.prevWidth = win.style.width; win.dataset.prevHeight = win.style.height; } win.dataset.snapped = 'right'; win.style.left = '50%'; win.style.top = '0px'; win.style.width = '50%'; win.style.height = 'calc(100% - 69px)'; } } isDragging = false; try { if (win._dragPointerId) { titlebar.releasePointerCapture && titlebar.releasePointerCapture(win._dragPointerId); } } catch {} try { if (win._dragPointerId) { win.releasePointerCapture && win.releasePointerCapture(win._dragPointerId); } } catch {} delete win._dragPointerId; if (win._dragCatcher) { try { win._dragCatcher.remove(); } catch {} delete win._dragCatcher; } win.style.boxShadow = ''; if (win._shadow) win._shadow.style.opacity = '0'; document.removeEventListener('pointermove', onDocPointerMove); document.removeEventListener('pointerup', onDocPointerUp); document.removeEventListener('pointercancel', onDocPointerUp); } const minW = 200, minH = 120; let resizeDir = null, startRect = null; function onResizePointerMove(e) { if (!resizeDir || !startRect) return; const px = e.clientX, py = e.clientY; let left = startRect.left, top = startRect.top, width = startRect.width, height = startRect.height; if (resizeDir.includes('e')) width = Math.max(minW, px - left); if (resizeDir.includes('s')) height = Math.max(minH, py - top); if (resizeDir.includes('w')) { const newLeft = Math.min(px, startRect.right - minW); width = startRect.right - newLeft; left = newLeft; } if (resizeDir.includes('n')) { const newTop = Math.min(py, startRect.bottom - minH); height = startRect.bottom - newTop; top = newTop; } Object.assign(win.style, { left: left + 'px', top: top + 'px', width: width + 'px', height: height + 'px' }); } function onResizePointerUp(e) { document.removeEventListener('pointermove', onResizePointerMove); document.removeEventListener('pointerup', onResizePointerUp); resizeDir = null; startRect = null; } win.querySelectorAll('.resize-handle').forEach(h => { h.addEventListener('pointerdown', e=>{ e.stopPropagation(); if (win.classList.contains('fullscreen')) return; resizeDir = Array.from(h.classList).find(c=>['n','s','e','w','ne','nw','se','sw'].includes(c)) || ''; startRect = win.getBoundingClientRect(); document.addEventListener('pointermove', onResizePointerMove); document.addEventListener('pointerup', onResizePointerUp); h.setPointerCapture(e.pointerId); }); }); function toggleMaximize() { const rect = win.getBoundingClientRect(); if (win.classList.contains('fullscreen')) { delete win.dataset.snapped; const prevLeft = win.dataset.prevLeft || (rect.left + 'px'); const prevTop = win.dataset.prevTop || (rect.top + 'px'); const prevWidth = win.dataset.prevWidth || (rect.width + 'px'); const prevHeight = win.dataset.prevHeight || (rect.height + 'px'); win.classList.remove('fullscreen'); // force reflow so styles update void win.offsetWidth; win.style.willChange = 'left,top,width,height,transform,opacity'; win.style.transition = 'left 360ms cubic-bezier(.2,.8,.2,1), top 360ms cubic-bezier(.2,.8,.2,1), width 360ms cubic-bezier(.2,.8,.2,1), height 360ms cubic-bezier(.2,.8,.2,1), opacity 220ms linear'; requestAnimationFrame(()=>{ win.style.left = prevLeft; win.style.top = prevTop; win.style.width = prevWidth; win.style.height = prevHeight; }); const onEnd = ()=>{ win.removeEventListener('transitionend', onEnd); win.style.transition = ''; win.style.willChange = ''; }; win.addEventListener('transitionend', onEnd); setTimeout(()=>{ if (win.style.transition) { onEnd(); } }, 700); } else { const prevRect = win.getBoundingClientRect(); if (!win.dataset.prevLeft) win.dataset.prevLeft = prevRect.left + 'px'; if (!win.dataset.prevTop) win.dataset.prevTop = prevRect.top + 'px'; if (!win.dataset.prevWidth) win.dataset.prevWidth = prevRect.width + 'px'; if (!win.dataset.prevHeight) win.dataset.prevHeight = prevRect.height + 'px'; const targetLeft = '0px'; const targetTop = '0px'; const targetWidth = window.innerWidth + 'px'; const targetHeight = (window.innerHeight - 90) + 'px'; win.style.willChange = 'left,top,width,height,transform,opacity'; win._justRestored = false; // Initialize the flag const onEnd = ()=>{ win.removeEventListener('transitionend', onEnd); win.style.transition = ''; win.style.willChange = ''; win._justRestored = true; // Set the flag after restoring setTimeout(()=>{ try{ delete win._justRestored; }catch{} }, 600); }; win.style.transition = 'left 360ms cubic-bezier(.2,.8,.2,1), top 360ms cubic-bezier(.2,.8,.2,1), width 360ms cubic-bezier(.2,.8,.2,1), height 360ms cubic-bezier(.2,.8,.2,1), opacity 220ms linear'; requestAnimationFrame(()=>{ win.style.left = targetLeft; win.style.top = targetTop; win.style.width = targetWidth; win.style.height = targetHeight; }); const onEnd2 = ()=>{ win.removeEventListener('transitionend', onEnd2); win.classList.add('fullscreen'); win.style.transition = ''; win.style.willChange = ''; }; win.addEventListener('transitionend', onEnd2); setTimeout(()=>{ if (!win.classList.contains('fullscreen')) { onEnd2(); } }, 600); } updateTaskbarButtons(); } closeBtn.addEventListener('click', ()=>{ const btn = win._tbBtn; if (btn) { const winRect = win.getBoundingClientRect(); const btnRect = btn.getBoundingClientRect(); const winCx = winRect.left + winRect.width/2; const winCy = winRect.top + winRect.height/2; const btnCx = btnRect.left + btnRect.width/2; const btnCy = btnRect.top + btnRect.height/2; const dx = btnCx - winCx; const dy = btnCy - winCy; const scale = Math.max(0.04, Math.min(0.2, btnRect.width / winRect.width)); win.style.willChange = 'transform, opacity'; win.style.transition = 'transform 360ms cubic-bezier(.2,.8,.2,1), opacity 260ms linear'; requestAnimationFrame(()=>{ win.style.transform = `translate(${dx}px, ${dy}px) scale(${scale})`; win.style.opacity = '0'; }); function onEnd(e){ if(e.propertyName !== 'transform') return; win.removeEventListener('transitionend', onEnd); if(btn && btn.remove) btn.remove(); if (win._shadow && win._shadow.remove) win._shadow.remove(); win.remove(); window.windows = window.windows.filter(w=>w!==win); updateTaskbarButtons(); } win.addEventListener('transitionend', onEnd); } else { win.style.transition = 'transform 260ms cubic-bezier(.2,.8,.2,1), opacity 200ms linear'; requestAnimationFrame(()=>{ win.style.transform = 'scale(0.92)'; win.style.opacity = '0'; }); win.addEventListener('transitionend', function onEnd2(){ win.removeEventListener('transitionend', onEnd2); if (win._shadow && win._shadow.remove) win._shadow.remove(); win.remove(); window.windows = window.windows.filter(w=>w!==win); updateTaskbarButtons(); }); } }); minBtn.addEventListener('click', ()=>{ minimizeWindow(win); }); maxBtn.addEventListener('click', ()=>{ toggleMaximize(); }); fetch(url, { method: 'HEAD' }).then(res=>{ if (res.ok) iframe.src = url; else iframe.src = '/apps/404.html'; }).catch(()=>{ iframe.src = '/apps/404.html'; }); iframe.src = url; iframe.addEventListener('error', ()=>{ iframe.srcdoc = '<html><body style="background:#222;color:#fff;font-family:sans-serif;padding:24px;"><h2>' + name + '</h2><p>Unable to load' + url + '</p></body></html>'; }); new ResizeObserver(()=>{ iframe.style.width = content.clientWidth + 'px'; iframe.style.height = content.clientHeight + 'px'; }).observe(content); function updateTaskbarButtons(){ Array.from(taskbarWindows.children).forEach((b,i)=>{ const w = window.windows[i]; if (!w) return; if (w.dataset.minimized) b.style.opacity = '0.6'; else b.style.opacity = '1'; if (w.classList.contains('focused')) b.style.boxShadow = 'inset 0 0 0 2px rgba(255,255,255,0.08)'; else b.style.boxShadow = 'none'; }); } focusWindow(win); window.addEventListener('keydown', e=>{ if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 'm') { const focused = window.windows.find(w=>w.classList.contains('focused')); if (focused) minimizeWindow(focused); } if (e.altKey && e.key === 'Tab') { e.preventDefault(); const idx = window.windows.findIndex(w=>w.classList.contains('focused')); const next = window.windows[(idx+1) % window.windows.length]; if (next) focusWindow(next); } }); win.minimize = ()=>minimizeWindow(win); win.restore = ()=>restoreWindow(win); win.close = ()=>{ if (win._shadow && win._shadow.remove) win._shadow.remove(); win.remove(); if (tbBtn && tbBtn.remove) tbBtn.remove(); window.windows = window.windows.filter(w=>w!==win); updateTaskbarButtons(); }; updateTaskbarButtons(); } window.openApp = openApp;})();(function(){ const mondDay = document.getElementById('mondDay'); const mondTime = document.getElementById('mondTime'); const days = ['SUNDAY','MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY']; function updateMond(){ const d = new Date(); mondDay.textContent = days[d.getDay()]; mondTime.textContent = d.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'}); } updateMond(); setInterval(updateMond, 1000);})();const taskbarIcons = document.querySelectorAll('.taskbar-icons .icon');taskbarIcons.forEach(icon=>{ icon.addEventListener('click',()=>{ const appUrl = icon.getAttribute('data-app'); const appName = 'Browser'; if(appUrl) openApp(appName, appUrl); });});// minimizing effect </script></body></html>`

        const filePath = path.join(process.cwd(), options.outputFile)

        fs.writeFile(filePath, base, (err) => {
          if (err) {
            console.error(err);
            return;
          }
          console.log('File has been saved!');
        });
    }
}

export default Cracker;
